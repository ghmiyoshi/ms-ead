#server:
#  port: 0
#
spring:
  application:
    name: ead-authuser
  config:
    import: 'optional:configserver:' #endereco do config server, mas como estou usando o eureka nao precisa
  cloud:
    config:
      discovery:
        service-id: configs-server
      username: guestcs
      password: guestcs
#  jpa:
#    defer-datasource-initialization: true
#  sql:
#    init:
#      mode: always

#eureka:
#  client:
#    service-url:
#      default-zone: 'http://guest:guest@localhost:8761/eureka'


#  datasource:
#    url: jdbc:mysql://localhost:3306/ead-authuser?useSSL=false&serverTimezone=UTC
#    username: root
#    password: root
#  jpa:
#    hibernate:
#      ddl-auto: update
#    show-sql: true
#  jackson:
#    mapper:
#      DEFAULT_VIEW_INCLUSION: true
#    default-property-inclusion: non_null
#    property-naming-strategy: SNAKE_CASE
#    deserialization:
#      fail-on-unknown-properties: true
#  rabbitmq:
#    host: localhost
#    port: 5672
#    username: guest
#    password: guest
#
#logging:
#  level:
#    com.ead.authuser: debug
#  pattern:
#    level: "%5p [${spring.application.name:},%X{traceId:-}]"
#
#ead:
#  api:
#    url:
#      course: http://ead-course
#  broker:
#    exchange:
#      userEvent: ead.userevent
#
#eureka:
#  instance:
#    instance-id:
#      ${spring.application.name}:${random.int}
#  client:
#    service-url:
#      default-zone: http://localhost:8761/eureka
#
#resilience4j:
#  circuitbreaker:
#    instances:
#      circuitbreakerInstance:
#        sliding-window-size: 30 # segundos que vai analisar
#        permitted-number-of-calls-in-half-open-state: 2 # Numero permitido de chamadas em estado meio aberto. Se retornar OK vai para o
#        # estado fechado, se n√£o estado aberto
#        sliding-window-type: TIME_BASED # Configuracao baseada por tempo
#        minimum-number-of-calls: 2 # Numero de chamadas que deve ser analisado e considerar a taxa de 80%
#        wait-duration-in-open-state: 30s # Tempo que vai ficar no estado aberto
#        failure-rate-threshold: 80 # Vai analisar se teve 80% ou mais de chamadas que foram feitas em 30 seg que teve erro. Se sim passa
#        # do estado fechado para aberto
#  retry:
#    instances:
#      retryInstance:
#        max-attempts: 3
#        wait-duration: 5s
